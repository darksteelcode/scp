//Nop instruction, also first instruction ran when cpu starts, so to give time for memory to load first instr
0:nop: NEW_INSTR, PC_INC

//Halt instrucion
255:halt:DECODE_NEXT=halt_2
$halt_2:halt_2:DECODE_NEXT=#halt

// LOAD OPCODES 1-16 STATUS: COMPLETE + CONFIRMED
// Load instructions format - lxxx - l(s)(m)(r)
// l      s                   m                                                                                   r
// (load)(size:b-byte,w-word)(mode:i-immediate,m-memory,p-pointer indirect through a,q=pointer indirect through b)(reg to load into: a or b)

//Load Immediate - Status: COMPLETE + CONFIRMED

//Load Byte Immediate A, set high mdr to zero
1:lbia:MDR_OUT_LOW_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=lbia_2,MDR_HIGH_RST
$lbia_2:lbia_2:PC_INC,NEW_INSTR, A_BUS_WE

//Load Byte Immediate B
2:lbib:MDR_OUT_LOW_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=lbib_2,MDR_HIGH_RST
$lbib_2:lbib_2:PC_INC,NEW_INSTR, B_BUS_WE

//Load Word Immediate A
3:lwia:MDR_OUT_LOW_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=lwia_2
$lwia_2:lwia_2:MDR_OUT_HIGH_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=lwia_3
$lwia_3:lwia_3:PC_INC,NEW_INSTR, A_BUS_WE

//Load Word Immediate B
4:lwib:MDR_OUT_LOW_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=lwib_2
$lwib_2:lwib_2:MDR_OUT_HIGH_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=lwib_3
$lwib_3:lwib_3:PC_INC,NEW_INSTR, B_BUS_WE

//Load Pointer(p) (INDIRECT FROM ADDR'S IN A) - Status: COMPLETE + CONFIRMED

//Load Byte Pointer(p) A
5:lbpa:MAR_SEL=0,AB_OUT_SEL=0,MDR_OUT_LOW_WE,DECODE_NEXT=lbpa_2,MDR_HIGH_RST
$lbpa_2:lbpa_2:A_BUS_WE,PC_INC,NEW_INSTR

//Load Byte Pointer(p) B
6:lbpb:MAR_SEL=0,AB_OUT_SEL=0,MDR_OUT_LOW_WE,DECODE_NEXT=lbpb_2,MDR_HIGH_RST
$lbpb_2:lbpb_2:B_BUS_WE,PC_INC,NEW_INSTR

//Load Word Pointer(p) A
7:lwpa:MAR_SEL=0,AB_OUT_SEL=0,MDR_OUT_LOW_WE,DECODE_NEXT=lwpa_2,A_INC
$lwpa_2:lwpa_2:MAR_SEL=0,AB_OUT_SEL=0,MDR_OUT_HIGH_WE,DECODE_NEXT=lwpa_3
$lwpa_3:lwpa_3:A_BUS_WE,PC_INC,NEW_INSTR

//Load Word Pointer(p) B
8:lwpb:MAR_SEL=0,AB_OUT_SEL=0,MDR_OUT_LOW_WE,A_INC,DECODE_NEXT=lwpb_2
$lwpb_2:lwpb_2:MAR_SEL=0,AB_OUT_SEL=0,MDR_OUT_HIGH_WE,DECODE_NEXT=lwpb_3,A_DEC
$lwpb_3:lwpb_3:B_BUS_WE,PC_INC,NEW_INSTR

//Load Pointer(q) (INDIRECT FROM ADDR'S IN B) - Status: COMPLETE + CONFIRMED

//Load Byte Pointer(q) A
9:lbqa:MAR_SEL=0,AB_OUT_SEL=1,MDR_OUT_LOW_WE,DECODE_NEXT=lbqa_2,MDR_HIGH_RST
$lbqa_2:lbpa_2:A_BUS_WE,PC_INC,NEW_INSTR

//Load Byte Pointer(q) B
10:lbqb:MAR_SEL=0,AB_OUT_SEL=1,MDR_OUT_LOW_WE,DECODE_NEXT=lbqb_2,MDR_HIGH_RST
$lbqb_2:lbpb_2:B_BUS_WE,PC_INC,NEW_INSTR

//Load Word Pointer(q) A
11:lwqa:MAR_SEL=0,AB_OUT_SEL=1,MDR_OUT_LOW_WE,DECODE_NEXT=lwqa_2,B_INC
$lwqa_2:lwpa_2:MAR_SEL=0,AB_OUT_SEL=1,MDR_OUT_HIGH_WE,DECODE_NEXT=lwqa_3,B_DEC
$lwqa_3:lwpa_3:A_BUS_WE,PC_INC,NEW_INSTR

//Load Word Pointer(q) B
12:lwqb:MAR_SEL=0,AB_OUT_SEL=1,MDR_OUT_LOW_WE,B_INC,DECODE_NEXT=lwqb_2
$lwqb_2:lwqb_2:MAR_SEL=0,AB_OUT_SEL=1,MDR_OUT_HIGH_WE,DECODE_NEXT=lwqb_3
$lwqb_3:lwqb_3:B_BUS_WE,PC_INC,NEW_INSTR


//Load Memory - Status: COMPLETE + CONFIRMED

//Load Byte Memory A - call lbpa to finish

13:lbma:MAR_SEL=2,MDR_OUT_LOW_WE,PC_INC,DECODE_NEXT=lbma_2
$lbma_2:lbma_2:MAR_SEL=2,MDR_OUT_HIGH_WE,PC_INC,DECODE_NEXT=lbma_3
$lbma_3:lbma_3:A_BUS_WE,DECODE_NEXT=#lbpa

//Load Byte Memory B - call lbqb to finish

14:lbmb:MAR_SEL=2,MDR_OUT_LOW_WE,PC_INC,DECODE_NEXT=lbmb_2
$lbmb_2:lbmb_2:MAR_SEL=2,MDR_OUT_HIGH_WE,PC_INC,DECODE_NEXT=lbmb_3
$lbmb_3:lbmb_3:B_BUS_WE,DECODE_NEXT=#lbqb

//Load Word Memory A - call lwpa to finish

15:lwma:MAR_SEL=2,MDR_OUT_LOW_WE,PC_INC,DECODE_NEXT=lwma_2
$lwma_2:lwma_2:MAR_SEL=2,MDR_OUT_HIGH_WE,PC_INC,DECODE_NEXT=lwma_3
$lwma_3:lwma_3:A_BUS_WE,DECODE_NEXT=#lwpa

//Load Word Memory B - call lwqb to finish

16:lwmb:MAR_SEL=2,MDR_OUT_LOW_WE,PC_INC,DECODE_NEXT=lwmb_2
$lwmb_2:lwmb_2:MAR_SEL=2,MDR_OUT_HIGH_WE,PC_INC,DECODE_NEXT=lwmb_3
$lwmb_3:lwmb_3:B_BUS_WE,DECODE_NEXT=#lwqb

// STORE OPCODES 17-24 STATUS: COMPLETE + COMFIRMED
// Store instructions format - sxxx - s(s)(m)(r)
// s      s                   m                                                                        r
// (store)(size:b-byte,w-word)(mode:p-pointer indirect through a,q=pointer indirect through b,m=memory)(reg to store: a or b)
// Some possibilities may not make sense, such as storing a in the addrs in a. Therefore, the following are the only implemented instructions:
// sbpb, swpb, sbqa, swqa, sbma, sbmb, swma, swmb

//Store Pointer(p) Instructions - Status: COMPLETE + CONFIRMED

//Store byte pointer(p) b - *a=(byte)b
17:sbpb:AB_OUT_SEL=0,MDR_AB_SEL=1,MDR_OUT_BYTE_SEL=0,MEM_WE,PC_INC,NEW_INSTR

//Store word pointer(p) b - *a=b
18:swpb:AB_OUT_SEL=0,MDR_AB_SEL=1,MDR_OUT_BYTE_SEL=0,MEM_WE,DECODE_NEXT=swpb_2,A_INC
$swpb_2:swpb_2:AB_OUT_SEL=0,MDR_AB_SEL=1,MDR_OUT_BYTE_SEL=1,MEM_WE,PC_INC,NEW_INSTR,A_DEC

//Store Pointer(q) Instructions - Status: COMPLETE + CONFIRMED

//Store Byte pointer(q) a - *b=(byte)a
19:sbqa:AB_OUT_SEL=1,MDR_AB_SEL=0,MDR_OUT_BYTE_SEL=0,MEM_WE,PC_INC,NEW_INSTR

//Store word pointer(q) a - *b=a
20:swqa:AB_OUT_SEL=1,MDR_AB_SEL=0,MDR_OUT_BYTE_SEL=0,MEM_WE,DECODE_NEXT=swqa_2,B_INC
$swqa_2:swqa_2:AB_OUT_SEL=1,MDR_AB_SEL=0,MDR_OUT_BYTE_SEL=1,MEM_WE,PC_INC,NEW_INSTR,B_DEC

//Store Memory Instructions - Status: COMPLETE + CONFIRMED

//Store Byte Memory A
21:sbma:MDR_OUT_LOW_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=sbma_2
$sbma_2:sbma_2:MDR_OUT_HIGH_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=sbma_3
$sbma_3:sbma_3:MAR_SEL=1,MDR_AB_SEL=0,MDR_OUT_BYTE_SEL=0,MEM_WE,NEW_INSTR,PC_INC

//Store Byte Memory B
22:sbmb:MDR_OUT_LOW_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=sbmb_2
$sbmb_2:sbmb_2:MDR_OUT_HIGH_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=sbmb_3
$sbmb_3:sbmb_3:MAR_SEL=1,MDR_AB_SEL=1,MDR_OUT_BYTE_SEL=0,MEM_WE,NEW_INSTR,PC_INC

//Store Word Memory A
23:swma:MDR_OUT_LOW_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=swma_2
$swma_2:swma_2:MDR_OUT_HIGH_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=swma_3
$swma_3:swma_3:MAR_SEL=1,MDR_AB_SEL=0,MDR_OUT_BYTE_SEL=0,MEM_WE,MDR_INC,DECODE_NEXT=swma_4
$swma_4:swma_4:MAR_SEL=1,MDR_AB_SEL=0,MDR_OUT_BYTE_SEL=1,MEM_WE,PC_INC,NEW_INSTR

//Store Word Memory B
24:swmb:MDR_OUT_LOW_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=swmb_2
$swmb_2:swmb_2:MDR_OUT_HIGH_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=swmb_3
$swmb_3:swmb_3:MAR_SEL=1,MDR_AB_SEL=1,MDR_OUT_BYTE_SEL=0,MEM_WE,MDR_INC,DECODE_NEXT=swmb_4
$swmb_4:swmb_4:MAR_SEL=1,MDR_AB_SEL=1,MDR_OUT_BYTE_SEL=1,MEM_WE,PC_INC,NEW_INSTR

//ALU OP OPCODES 25-45 STATUS: COMPLETE + CONFIRMED
//ALU op format - a(ooo) - ooo is alu operation code (add, sub, shr, etc.)
//These opcodes perform the indicated operation, and store the result in a reg

//ALU op support micro instruction - called after each op, stores the result into a and loads new instr
$a_end:a_end:A_ALU_WE,NEW_INSTR,PC_INC

//add
25:aadd:ALU_OP=0,DECODE_NEXT=a_end
//sub
26:asub:ALU_OP=1,DECODE_NEXT=a_end
//mul
27:amul:ALU_OP=2,DECODE_NEXT=a_end
//bor
28:abor:ALU_OP=3,DECODE_NEXT=a_end
//bxor
29:abxr:ALU_OP=4,DECODE_NEXT=a_end
//band
30:abnd:ALU_OP=5,DECODE_NEXT=a_end
//signed >>>
31:assr:ALU_OP=6,DECODE_NEXT=a_end
//unsigned >>
32:ashr:ALU_OP=7,DECODE_NEXT=a_end
//unsigned <<
33:ashl:ALU_OP=8,DECODE_NEXT=a_end
//negative
34:aneg:ALU_OP=9,DECODE_NEXT=a_end
//logical neg
35:alng:ALU_OP=10,DECODE_NEXT=a_end
//binary neg
36:abng:ALU_OP=11,DECODE_NEXT=a_end
//conv to logical value
37:aclv:ALU_OP=12,DECODE_NEXT=a_end
//test equal
38:aequ:ALU_OP=13,DECODE_NEXT=a_end
//test not equal
39:aneq:ALU_OP=14,DECODE_NEXT=a_end
//signed <
40:aslt:ALU_OP=15,DECODE_NEXT=a_end
//unsigned <
41:ault:ALU_OP=16,DECODE_NEXT=a_end
//signed <=
42:asle:ALU_OP=17,DECODE_NEXT=a_end
//unsigned <=
43:aule:ALU_OP=18,DECODE_NEXT=a_end
//sign extend byte
44:asex:ALU_OP=19,DECODE_NEXT=a_end
//set res(and a) to b
45:aaeb:ALU_OP=20,DECODE_NEXT=a_end

//JMP OPCODES 46 - 48 STATUS - COMPLETE + CONFIRMED

//All jumps are to static locations as it is all small c requires
//Jump utility microinstruction - because pc latches take a cycle, this is called to decode the right instruction after a jump
$jmp_end:jmp_end:NEW_INSTR,PC_INC

//Unconditional Jump - Status: COMPLETE + CONFIRMED
46:jmp:MDR_OUT_LOW_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=jmp_2
$jmp_2:jmp_2:MDR_OUT_HIGH_WE,MAR_SEL=2,DECODE_NEXT=jmp_3
$jmp_3:jmp_3:PC_MDR_WE,DECODE_NEXT=jmp_end

//Jump if not zero - Status: COMPLETE + CONFIRMED
47:jpnz:MDR_OUT_LOW_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=jpnz_2
$jpnz_2:jpnz_2:MDR_OUT_HIGH_WE,MAR_SEL=2,DECODE_NEXT=jpnz_3
$jpnz_3:jpnz_3:PC_COND_EN,PC_COND_MODE=0,PC_MDR_WE,DECODE_NEXT=jmp_end

//Jump if zero - Status: COMPLETE + CONFIRMED
48:jpz:MDR_OUT_LOW_WE,MAR_SEL=2,PC_INC,DECODE_NEXT=jpz_2
$jpz_2:jpz_2:MDR_OUT_HIGH_WE,MAR_SEL=2,DECODE_NEXT=jpz_3
$jpz_3:jpz_3:PC_COND_EN,PC_COND_MODE=1,PC_MDR_WE,DECODE_NEXT=jmp_end

//INC and DEC OPCODES STATUS - COMPLETE + CONFIRMED

//these increment and deincrement regs a and b

49:inca:A_INC,PC_INC,NEW_INSTR

50:incb:B_INC,PC_INC,NEW_INSTR

51:deca:A_DEC,PC_INC,NEW_INSTR

52:decb:B_DEC,PC_INC,NEW_INSTR